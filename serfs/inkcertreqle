#!/bin/bash
#inkVerbSerf! verb.ink
#set -e

# This requests and gets Letsencrypt certs via inkCert-Letsencrypt for a given domain, including inkVerb namespace domains
## It also applies to all subdomains for that domain
## Prerequesite: inkcertinstall, domains added via newdomain/newdomaincgi or an existing and active verb domain on this Verber
## This is intended as a subscript of inkcertdole
## Use the "r" option at the end to bypass the normal check for already-done LE certs and refresh the cert, such as to include recently added subdomains.

# How to use:
## ./inkcertreqle [domain.tld NO SUBDOMAINS] [r (optional)]

#Eg:
## ./inkcertreqle inkisaverb.com
## ./inkcertreqle YOURNAME.verb.blue
## ./inkcertreqle inkisaverb.com r
## ./inkcertreqle YOURNAME.verb.pink r


DOMAIN=$1

# Include the configs
. /opt/verb/conf/sitenameip
. /opt/verb/conf/siteurilist
. /opt/verb/conf/inkcert/inkcertstatus

# Check inkCert installed
if [ "${INKCERTINSTALLED}" = "NOT_YET" ]; then
echo "inkCert not yet installed.

First run inkcertinstall
"
exit 0
fi

# Verify that the domain is installed
if [ ! -f /opt/verb/conf/inkcert/cli-ini/siteinkcert.${DOMAIN} ]; then
echo "Sorry, Bucko. ${DOMAIN} is not installed yet.

Do that first, then get back to me.
"; exit 0
fi

# Include and check the inkCert domain config
. /opt/verb/conf/inkcert/cli-ini/siteinkcert.${DOMAIN}
if [ "${INKCERTED}" = "DONE_IC" ]; then
echo "inkCert proper is already setup for ${DOMAIN}.

To set up certs via Certbot or Letsencrypt, first run: inkcertrevoke ${DOMAIN}, then run this again.
"
exit 0
fi
if [ "${INKCERTED}" = "DONE_LE" ]; then
echo "inkCert proper is already setup for ${DOMAIN}.

To set up certs via Certbot or inkCert Proper, first run: inkcertrevoke ${DOMAIN}, then run this again.
"
exit 0
fi
if [ "${INKCERTED}" = "DONE_CB" ]; then
echo "inkCert proper is already setup for ${DOMAIN}.

To set up certs via Letsencrypt or inkCert Proper, first run: inkcertrevoke ${DOMAIN}, then run this again.
"
exit 0
fi

# Check for verb domain and status
## If verb domain was spelled correctly
if [[ "${DOMAIN}" =~ ".verb.email" ]] || [[ "${DOMAIN}" =~ ".verb.one" ]] || [[ "${DOMAIN}" =~ ".verb.ink" ]] || [[ "${DOMAIN}" =~ ".verb.blue" ]] || [[ "${DOMAIN}" =~ ".verb.vip" ]] || [[ "${DOMAIN}" =~ ".verb.kiwi" ]] || [[ "${DOMAIN}" =~ ".verb.red" ]] || [[ "${DOMAIN}" =~ ".verb.rocks" ]]; then
 if [[ "${DOMAIN}" != *"${SITENAME}"* ]]; then
echo "
Problem: You might have spelled ${DOMAIN} wrong.
  - Did you mean to include "${SITENAME}"?
  - Are you an awesome person with multiple inkVerb namespaces, but you somehow have the wrong server?
"
exit 0
 fi
fi
## Check specific verb domain tlds
### Create the error message function
verbtld_is_off() {
echo "
Problem: ${DOMAIN} is not active on this server...
  1. It could be running on a different Verber server. If so, run inkCert on that server.
  2. You could have planned it for this Verber server, but it's not on. Activate on this server with verbon
  3. It's possible you haven't purchased an inkVerb namespace from inkisaverb.com. It's not that expensive.
"; exit 0;
}
### Do the checks per each verb tld
. /opt/verb/conf/sitetldstatus
if [ "${DOMAIN}" = "${emailURI}" ]; then
 if [[ "${VERBemail}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${cityURI}" ]; then
 if [[ "${VERBcity}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${oneURI}" ]; then
 if [[ "${VERBone}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${inkURI}" ]; then
 if [[ "${VERBink}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${blueURI}" ]; then
 if [[ "${VERBblue}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${vipURI}" ]; then
 if [[ "${VERBvip}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${kiwiURI}" ]; then
 if [[ "${VERBkiwi}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${pinkURI}" ]; then
 if [[ "${VERBpink}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${redURI}" ]; then
 if [[ "${VERBred}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${rocksURI}" ]; then
 if [[ "${VERBrocks}" != true ]]; then
  verbtld_is_off
 fi
fi

# Stop Apache
apache2ctl graceful-stop; wait
systemctl stop apache2; wait

# Get the certs
##NOTE make the system wait before and after Letsencrypt because sometimes LE can stumble over it's own feet.
sleep 1
## We need `yes n |` because the salesmen want to break the script with email solicitation
yes n | certbot --apache certonly --expand --renew-by-default -c /opt/verb/conf/inkcert/cli-ini/cli.${DOMAIN}.ini
wait
sleep 1
# the --quiet / -q option doesn't seem to work
# Additional options if not doing certonly: --no-redirect --no-hsts --no-uir
# https://certbot.eff.org/docs/using.html#command-line
# https://certbot.eff.org/#ubuntuxenial-apache

# Turn Apache on again
#apache2ctl start; wait
systemctl start apache2; wait

# Verify the certs
if [ ! -d /etc/inkcert/le/live/${DOMAIN} ]; then
echo "Big error! Unable to get the certs from the cert authority. Can't continue."; exit 4
fi

# Finish
echo "
Finished getting certs. Now to install them with inkcertaddle...
"
